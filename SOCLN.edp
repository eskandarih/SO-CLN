include "./Geometry/Minduct1.idp"
int coil=Th(a1/2,c/2).region;
int york=Th(a1/2,3*b1/4).region;

 verbosity = 0;

int debugging = 1; //if you don't want the plots set this to 0
int FPmax = 50; // maximum number of Fixed Point iterations
int numStages = 5;
real [int] lambda(2*numStages+1);
real RR,LL;

real nu0=1e7/4/pi;
real nu1=1e3/4/pi;
real hn=10., h0=1.;
int nb=1;

ofstream gg("SOCLNresults.csv");
gg << "h1,h3,";
for (int i=0;i<2*numStages+1;i++){
    gg << "lambda_"+i+",";
}
gg << endl;

macro Curl(u) [dy(u),-dx(u)] //

fespace Vh(Th,P1);
Vh Az=0, dA, w;
Vh[int] Ac(numStages+1);
Vh[int] Ec(numStages+1);
Ac[0] = 0;
Ac[1] = 0;

fespace V0(Th,P1dc);
V0 Bx=0, By=0, Bm, E, nu, mu, nuNew, muNew, err;
V0 co=1.0*(region==coil);
V0 yo=1.0*(region==york);
V0 ar=1.0*(region!=york);
V0 sig = 4.0e7*co+1.0e6*yo;

E=1.0*co;
Ec[0] = E;
lambda[0] = int2d(Th)( sig*E^2 );
RR = 1./lambda[0];

nu=nu1*yo + nu0*ar;
mu = 1./nu;

problem MagCLN(Az,w,solver=CG) = int2d(Th)( nu*Curl(Az)'*Curl(w) ) -int2d(Th)( RR*sig*E*w ) +on(out4,Az=0)+on(out5,Az=0)+on(out6,Az=0)+on(out7,Az=0);

real vminh1=-1, vmaxh1=1.3, mmaxh1=30, h1; //sweeping the h1=I1 from 10^vmin to 10^vmax in mmax steps
real vminh3=-1, vmaxh3=1.3, mmaxh3=30, h3; //sweeping the h3=I1 from 10^vmin to 10^vmax in mmax steps

for (int h1idx=0; h1idx<=mmaxh1; h1idx++){
    h1 = 10^(vminh1 + (vmaxh1-vminh1)*h1idx/mmaxh1);

    for (int h3idx=0; h3idx<=mmaxh3; h3idx++){
        h3 = 10^(vminh3 + (vmaxh3-vminh3)*h3idx/mmaxh3);

        // updating permeability nu(h1,h3)
        Az = h1*Ac[0] + h3*Ac[1];
        Bx=dy(Az);
        By=-dx(Az);
        nu=(hn*(Bx^2+By^2)^nb+h0)*nu1*yo + nu0*ar;
        mu = 1./nu;

        // calculating nu(h1,h3) using fixed-point method
        for (int FPiter=1; FPiter<=FPmax; FPiter++){


            RR = 1./lambda[0];
            E = Ec[0];
            MagCLN; //calculates Az     K*Az = R0*sigma*E0
            Ac[0] = Az;
            lambda[1] = int2d(Th)( nu*(dx(Ac[0])^2+dy(Ac[0])^2) );
            LL = lambda[1];
            Ec[1] = Ec[0] - Ac[0]/LL; //E2
            E = Ec[1];
            lambda[2] = int2d(Th)( sig*E^2 );
            RR = 1./lambda[2]; //R2
            MagCLN; // calculates Az       K*Az = R2*sigma*E2
            Ac[1] = Az;

            // updating permeability nu(h1,h3)
            Az = h1*Ac[0] + h3*Ac[1];
            Bx=dy(Az);
            By=-dx(Az);
            nuNew = (hn*(Bx^2+By^2)^nb+h0)*nu1*yo + nu0*ar;
            muNew = 1./nuNew;

            err = mu-muNew;
            real magMu = mu[].l2;
            real bflag = err[].l2 / magMu;

            nu = 0.8*nu + 0.2*nuNew;
            mu = 1./nu;

            cout << "h1=" << h1 <<"  h3="<< h3 <<"   FPiter="<<FPiter<<"    ||mu-muNew||="<<bflag <<"   ||mu||="<<magMu << endl;

            if (bflag < 1e-3) {
                //Bm = sqrt(Bx^2+By^2);
                //plot(Bm,cmm="h1="+h1+" h3="+h3,fill=1,value=1);
                cout << "============================================" << endl;
                break;
            }

        }

        // obtaining stage 2,3,...
        for (int n=1; n<numStages; n++){
            lambda[2*n+1] = int2d(Th)( nu*(dx(Ac[n])^2+dy(Ac[n])^2) ); // L_2n+1
            LL = lambda[2*n+1];
            Ec[n+1] = Ec[n] - Ac[n]/LL; //E_2n+2
            E = Ec[n+1];
            lambda[2*n+2] = int2d(Th)( sig*E^2 );
            RR = 1./lambda[2*n+2]; //R4
            MagCLN; // calculates Az       K*Az = R_2n+2 * sigma * E_2n+2
            Ac[n+1] = Ac[n]+Az;
        }

        // printing data
            gg.scientific << h1 << ", " << h3;
        for (int n=0; n<(2*numStages+1); n++){
            gg.scientific << ", " << lambda[n];
        }
        gg.scientific << endl;

    }
}

